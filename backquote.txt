http://aka-cs-blog.blogspot.com/2010/01/lisp-quote-backquote-3.html
より抜粋。

;; 用語1. form は、断りがない限り、任意のLispフォー
;; ムを表すものとする。

;; 用語2. basic は、form からリストと一般のベクタを
;; 除外したものである。

;; 用語3. 2つのLispフォームがあり、それらを評価した
;; 結果がequalにて等しいことを、評価等価と呼ぶ。こ
;; のとき、評価する回数は複数回も考えられる。A と
;; B が一回の評価において評価等価なとき、A = Bと書
;; く。二回の評価において評価等価なときは、A == B
;; と書く。

;; 1. `basic = 'basic.

;; 2. `,form = form. 
;; ただし、ここでの form は、@ または . で始まる
;; Lispフォームを除外している。

;; 3. `,@form は誤りである。

;; 4. `(x1 x2 x3 ... xn . atom) = (append [x1] [x2] [x3] ... [xn] (quote atom))

;;   ここで角括弧は次のようなものである。(上から順に判定)
;;   - xjが,@で始まるとき、xjを,@formと書けば、[xj] = form。
;;   - xjが,で始まるとき、xjを,formと書けば、  [xj] = (list form)。
;;   - それ以外のとき、xjをformと書けば、      [xj] = (list `form)。
;;     ここで、`formはバッククォートフォームである。
;;     このフォームも再帰的に解釈をすすめる。

;; 5. `(x1 x2 x3 ... xn) = `(x1 x2 x3 ... xn . nil)

;; 6. `(x1 x2 x3 ... xn . ,form) = (append [x1] [x2] [x3] ... [xn] form)

;; 7. `(x1 x2 x3 ... xn . ,@form) は誤りである。

;; 8. `#(x1 x2 x3 ... xn) = (apply #'vector `(x1 x2 x3 ... xn))

;; 9. ,@ が使われているところはどこでも、,@ の代わ
;; りに ,. を使うことができる。この両者の違いは、,.
;; の場合は、後続のformが生成するリストを破壊しても
;; よいということである。

;; 10. バッククォート構文が入れ子になっている場合、
;; もっとも内側のマクロ文字バッククォートに属する
;; フォームが最初に展開される。

;; さて、先送りした話に戻ろう。

;; `((,a b) ,c ,@d)

;; を上記ルールに基づいて解釈(展開)すると、

;; (append (list (append (list a) (list 'b) 'nil)) (list ) d 'nil)

;; になる。しかし、バッククォート構文のルールが述べ
;; ているのは、readerがまさにこのLispオブジェクトを
;; 返さなければいけないということではなく、これと評
;; 価等価なLispオブジェクトを返せばよいということだ。
;; それは無数に存在する。例は次のとおり。

;; (append (list (cons a '(b))) (list c d)
;; (list* (cons a '(b)) c d)

;; readerが返すものは、これらのうちどれでもよいのだ。
